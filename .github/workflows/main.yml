name: workflow

on:
    push:
        branches:
            - main
        paths-ignore:
            - .gitignore
            - README.md

jobs:
    integration:
        name: Continuation Integration(CI)
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Lint code
              run: echo "Linting Code Repository....."
              # Can use tools like flake8, pylint, etc. for linting

            - name: Run unit tests
              run: echo "Running Unit Tests....."
              # Can use pytest or unittest for running tests


    build-and-push-ecr-image:
        name: Continuous Delivery(CD) - Build and Push Docker Image to Amazon ECR
        needs: integration      # This job depends on the integration job
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
            
            - name: Install Utilities
              run: |
                sudo apt-get update
                sudo apt-get install -y jq unzip
                
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}
            
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            

            - name: Show workspace structure
              run: |
                echo "Current Directory: $(pwd)"
                ls -la

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
                IMAGE_TAG: latest
              run: |
                # Build a docker container and
                # push it to ECR so that it can be deployed to ECS.

                
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    
    Continuous-Deployment:
       name: Continuous Deployment(CD) - Deploy Docker Image to Amazon EC2 instance
       needs: build-and-push-ecr-image  # This job depends on the build-and-push-ecr-image job
       runs-on: self-hosted  # Uses a self-hosted runner for deployment instead of GitHub-hosted runners and need to configure the self-hosted runner on your EC2 instance.
       steps:
         - name: Checkout
           uses: actions/checkout@v3
                
         - name: Configure AWS credentials  # Configure AWS credentials for deployment
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             aws-region: ${{ secrets.AWS_REGION }}
                
         - name: Login to Amazon ECR  # Login to Amazon ECR to pull the Docker image
           id: login-ecr
           uses: aws-actions/amazon-ecr-login@v1
                      
                      
         - name: Pull latest images  # Pull the latest Docker image from Amazon ECR
           run: |
            docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
           
            
         - name: Stop and remove  container if already running
           run: |
            docker ps -q --filter "name=networksecurity" | grep -q . && docker stop networksecurity && docker rm -fv networksecurity || echo "No running container found. Skipping stop and remove."
             
            
         - name: Run Docker Image to serve users
           run: |
            docker run -d -p 8080:8080 --ipc="host" --name=networksecurity -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         

         - name: Clean previous images and containers
           run: |
            docker system prune -f    
                        
            

